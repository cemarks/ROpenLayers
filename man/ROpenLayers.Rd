% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ol_map_base.R
\docType{package}
\name{ROpenLayers}
\alias{ROpenLayers}
\alias{ROpenLayers-package}
\title{ROpenLayers: A pacakge for Geo-Visualization}
\description{
ROpenLayers leverages the power of OpenLayers javascript libraries
and web-based Mapservers to enable informative visualization.
}
\section{What this package does}{

The purpose of this package is to make it easy for a user to visualize
geo-spatial data and analyses using the open source
\href{https://openlayers.org/}{OpenLayers} javascript library and
online map servers.  The process for creating a visualization 
imitates the process of creating a plot in R package 
\href{https://ggplot2.tidyverse.org/}{\code{ggplot2}}.  
\enumerate{
\item First, an OpenLayers Map object is created with a 
call to the \code{\link{ol_map}} method.  
\item Next, layers and scales are created and added.  Layers can reference
map servers to provide underlying base maps or vector features 
(polygons, lines, or points) created or imported in R.  These capabilities
are described in the following sections.
\item Finally, the updated map object is exported to HTML/javascript for
viewing in a browser, hosting on a server, or embedding into another 
application or format.  Export methods are \code{\link{ol_map2HTML}} and 
\code{\link{ol_map2Strings}}.
}
}

\section{OpenLayers}{

\href{https://openlayers.org}{OpenLayers}
 is an open source javascript library that makes it easy to put a
dynamic map on any web page.  It is licensed under the 2-clause BSD
license (see \href{https://github.com/openlayers/openlayers/blob/master/LICENSE.md}{OpenLayers Licence}).
This license will appear commented within OpenLayers CSS code in the
HTML exports created by this package. However, this package does not
contain any of the OpenLayers javascript source code; rather, it exports
HTML code that source these libraries when loaded.  Therefore, these
products will not render without network access to the OpenLayers
javascript library.  By default, the products exported by this package
source OpenLayers 3.16.0, but the user has the option to set the 
source URL (see \code{\link{ol_map}}).
}

\section{Public ArcGIS Servers}{

\href{https://www.arcgis.com}{ESRI ArcGIS} hosts several 
publicly available map servers at 
\href{https://server.arcgisonline.com/arcgis/rest/services}{arcgisonline.com},
 which can accessed via REST APIs and rendered using OpenLayers javascript methods.
A subset of these are made available in this package through the 
\code{\link{public_arcgis_basemap}} method.  Alternatively, a user can
specify any ArcGIS map server using the \code{\link{user_arcgis_basemap}}
method.  Note that while these maps servers are publicly available, they are
not necessarily open-licensed.  Users must ensure they comply with each
map server's license and terms of use.
}

\section{OpenStreetMap}{

\href{https://www.openstreetmap.org/}{OpenStreetMap} also hosts a public and
open license map server that can be imported as a layer using OpenLayers.
See \code{\link{public_OSM_basemap}}.
}

\section{Other Servers}{

As stated above, the \code{\link{user_arcgis_basemap}} method allows the user
to manually specify any available ArcGIS map server.  This package also provides
access to US National Geospatial-Intelligence Agency servers hosted
at \href{https://www.nga.mil}{NGA.mil} through the \code{\link{nga_basemap}}
method.  Note that these servers require authentication, which will be requested
at the time of access (i.e., when the HTML page is opened in a browser).
}

\section{Vector Layers}{

This package enables users to rapidly access and write OpenLayers 
vector layers in javascript.  The following methods enable that functionality.
\itemize{
\item \code{\link{ol_geom_polygon}}
\item \code{\link{ol_geom_line}}
\item \code{\link{ol_geom_point}}
\item \code{\link{ol_geom_icon}}
\item \code{\link{ol_geom_circle}}
\item \code{\link{ol_geom_heatmap}}
\item \code{\link{ol_geom_text}}
}
}

\examples{
data(quakes)
center <- c(mean(quakes$long),mean(quakes$lat))
quakes$long[which(quakes$long>180)]<-quakes$long[which(quakes$long>180)]-360
tooltips <- paste("Depth",quakes$depth,sep=": ")
mymap <- ol_map(
    zoom = 5,
    center = center,
    map.heading = "Earthquake Data Visualization"
)
basemap.layer <- public_arcgis_basemap(
    "OceanBase",
    toggle.control=FALSE
)
point.layer <- ol_geom_point(
    quakes[,c("long","lat")],
    mapping = ol_aes(fill=mag),
    df = quakes,
    name = "Earthquake Points",
    toggle.control=TRUE,
    tooltip = tooltips
)
heatmap.layer <- ol_geom_heatmap(
    quakes[,c("long","lat")],
    name = "Earthquake Heatmap",
    toggle.control=TRUE,
    weight.values = quakes$mag,
    opacity = 0.25
)
mymap <- mymap +
    basemap.layer +
    point.layer +
    ol_scale_fill_continuous(name="Magnitude",display=TRUE) +
    heatmap.layer
## Not run: save to file and open in browser
# ol_map2HTML(mymap,"Quakes.html")
# browseURL("Quakes.html")
}
